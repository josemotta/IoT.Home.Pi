/*
 * home
 *
 * The API for the Home Starter project
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ZWaveApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        
        /// <response code="200">ok</response>
        [HttpGet]
        [Route("/motta/home/1.0.3/lightingSummary")]
        [ValidateModelState]
        [SwaggerOperation("GetLightingSummary")]
        [SwaggerResponse(statusCode: 200, type: typeof(LightingSummary), description: "ok")]
        public virtual IActionResult GetLightingSummary()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LightingSummary));

            string exampleJson = null;
            exampleJson = "{\n  \"zoneStatus\" : [ {\n    \"level\" : 6,\n    \"lastUpdate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"id\" : \"id\"\n  }, {\n    \"level\" : 6,\n    \"lastUpdate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"id\" : \"id\"\n  } ],\n  \"zones\" : [ {\n    \"deviceType\" : \"dimmer\",\n    \"zone\" : \"zone\",\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"deviceId\" : 0\n  }, {\n    \"deviceType\" : \"dimmer\",\n    \"zone\" : \"zone\",\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"deviceId\" : 0\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LightingSummary>(exampleJson)
            : default(LightingSummary);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="deviceId"></param>
        /// <response code="200">response</response>
        [HttpGet]
        [Route("/motta/home/1.0.3/lighting/switches/{deviceId}")]
        [ValidateModelState]
        [SwaggerOperation("GetSwitchState")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeviceState), description: "response")]
        public virtual IActionResult GetSwitchState([FromRoute][Required]string deviceId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeviceState));

            string exampleJson = null;
            exampleJson = "{\n  \"level\" : 0,\n  \"lastUpdate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"name\" : \"name\",\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeviceState>(exampleJson)
            : default(DeviceState);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <response code="200">response</response>
        [HttpPost]
        [Route("/motta/home/1.0.3/lighting/dimmers/{deviceId}/{value}")]
        [ValidateModelState]
        [SwaggerOperation("SetDimmer")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "response")]
        public virtual IActionResult SetDimmer([FromRoute][Required]string deviceId, [FromRoute][Required][Range(0, 100)]int? value)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"everything is ok\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>sets a dimmer to a specific value on a timer</remarks>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="timeunit"></param>
        /// <param name="units"></param>
        /// <response code="200">response</response>
        [HttpPost]
        [Route("/motta/home/1.0.3/lighting/dimmers/{deviceId}/{value}/timer/{timeunit}")]
        [ValidateModelState]
        [SwaggerOperation("SetDimmerTimer")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "response")]
        public virtual IActionResult SetDimmerTimer([FromRoute][Required]string deviceId, [FromRoute][Required]int? value, [FromRoute][Required]int? timeunit, [FromQuery]string units)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"everything is ok\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <response code="200">response</response>
        [HttpPost]
        [Route("/motta/home/1.0.3/lighting/switches/{deviceId}/{value}")]
        [ValidateModelState]
        [SwaggerOperation("SetSwitch")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "response")]
        public virtual IActionResult SetSwitch([FromRoute][Required]string deviceId, [FromRoute][Required]string value)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"everything is ok\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>sets a switch to a specific value on a timer</remarks>
        /// <param name="deviceId"></param>
        /// <param name="value"></param>
        /// <param name="minutes"></param>
        /// <response code="200">response</response>
        [HttpPost]
        [Route("/motta/home/1.0.3/lighting/switches/{deviceId}/{value}/timer/{minutes}")]
        [ValidateModelState]
        [SwaggerOperation("SetSwitchTimer")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "response")]
        public virtual IActionResult SetSwitchTimer([FromRoute][Required]string deviceId, [FromRoute][Required]string value, [FromRoute][Required]int? minutes)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"everything is ok\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
