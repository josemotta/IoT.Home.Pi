/*
 * home
 *
 * The API for the Home Starter project
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using Raspberry.IO.InterIntegratedCircuit;
using Raspberry.IO.Components.Sensors.Pressure.Bmp180;
using Raspberry.IO.Components.Sensors.Light;
using Raspberry.IO.Components.Sensors.Humidity.Htu21df;
using Raspberry.IO.Components.Sensors.Distance.HcSr04;
using Raspberry.IO.GeneralPurpose;
using Raspberry.Timers;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class EnvironmentApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="days"></param>
        /// <response code="200">the forecast</response>
        [HttpGet]
        [Route("/motta/home/1.0.3/temperature/forecast/{days}")]
        [ValidateModelState]
        [SwaggerOperation("GetForecast")]
        [SwaggerResponse(200, typeof(ForecastResponse), "the forecast")]
        public virtual IActionResult GetForecast([FromRoute]int? days)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ForecastResponse>(exampleJson)
            : default(ForecastResponse);
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>gets the state of the heater</remarks>
        /// <param name="zoneId"></param>
        /// <response code="200">heater state</response>
        [HttpGet]
        [Route("/motta/home/1.0.3/temperature/{zoneId}/heater")]
        [ValidateModelState]
        [SwaggerOperation("GetHeaterState")]
        [SwaggerResponse(200, typeof(HeaterState), "heater state")]
        public virtual IActionResult GetHeaterState([FromRoute]string zoneId)
        {
            //string exampleJson = null;

            const ConnectorPin triggerPin = ConnectorPin.P1Pin38;
            const ConnectorPin echoPin = ConnectorPin.P1Pin40;

            double distance = 0;
            string state = null;

            Console.WriteLine("info: HC-SR04 distance measure");
            Console.WriteLine("      Trigger: {0}", triggerPin);
            Console.WriteLine("      Echo: {0}", echoPin);

            var driver = GpioConnectionSettings.DefaultDriver;

            using (var connection = new HcSr04Connection(
                driver.Out(triggerPin.ToProcessor()),
                driver.In(echoPin.ToProcessor())))

                try
                {
                    distance = connection.GetDistance().Centimeters;
                    Console.WriteLine(string.Format("{0:0.0} cm", distance).PadRight(16));
                    //Console.CursorTop--;
                }
                catch (TimeoutException e)
                {
                    state = "Timeout: " + e.Message;
                }

            if (state == null) state = string.Format("{0:0.0} cm", distance);

            HeaterState hs = new HeaterState
            {
                Id = zoneId,
                State = state
            };

            var hs_state = hs ?? default(HeaterState);
            return new ObjectResult(hs_state);
        }

        /// <summary>
        /// 
        /// </summary>

        /// <param name="zoneId"></param>
        /// <response code="200">Zone temperature</response>
        [HttpGet]
        [Route("/motta/home/1.0.3/temperature/{zoneId}")]
        [ValidateModelState]
        [SwaggerOperation("GetZoneTemperature")]
        [SwaggerResponse(200, typeof(TemperatureZoneStatus), "Zone temperature")]
        public virtual IActionResult GetZoneTemperature([FromRoute]string zoneId)
        {
            TemperatureZoneStatus tzs = null;

            I2cDriver driver = new I2cDriver(Raspberry.IO.GeneralPurpose.ProcessorPin.Pin02, Raspberry.IO.GeneralPurpose.ProcessorPin.Pin03);

            if (driver != null)
            {
                BMP180PressureTempSensor p_sensor = new BMP180PressureTempSensor(driver, 0x77, BMP085Mode.UltraHighRes);

                //BH1750Connection l_sensor = new BH1750Connection(driver.Connect(0x40));

                var ht_sensor = new Htu21dfConnection(driver.Connect(0x40));
                ht_sensor.Begin();

                tzs = new TemperatureZoneStatus
                {
                    Id = zoneId,
                    Name = "HTU21DF-BMP180",
                    TemperatureValue = ht_sensor.ReadTemperature(),
                    PressureValue = p_sensor.ReadSealevelPressure(),
                    HumidityValue = ht_sensor.ReadHumidity(),
                    Units = TemperatureZoneStatus.UnitsEnum.CelsiusEnum,
                    Timestamp = DateTime.Now
                };
            }
                        
            var example = tzs ?? default(TemperatureZoneStatus);
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>turns the heater on or off</remarks>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <response code="200">Status of the operation</response>
        [HttpPost]
        [Route("/motta/home/1.0.3/temperature/{zoneId}/heater/{state}")]
        [ValidateModelState]
        [SwaggerOperation("SetHeaterState")]
        [SwaggerResponse(200, typeof(ApiResponse), "Status of the operation")]
        public virtual IActionResult SetHeaterState([FromRoute]string zoneId, [FromRoute]string state)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        
        /// <response code="200">ok</response>
        [HttpGet]
        [Route("/motta/home/1.0.3/temperature")]
        [ValidateModelState]
        [SwaggerOperation("TemperatureSummary")]
        [SwaggerResponse(200, typeof(TemperatureSummary), "ok")]
        public virtual IActionResult TemperatureSummary()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TemperatureSummary>(exampleJson)
            : default(TemperatureSummary);
            return new ObjectResult(example);
        }
    }
}
